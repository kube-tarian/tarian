name: charts

on:
  push:
    paths:
      - charts/**
      - .github/**
  pull_request:
    paths:
      - charts/**
      - .github/**

permissions: read-all

jobs:
  lint-test:
    runs-on: self-hosted
    env:
      GOPATH: ${{ github.workspace }}/../go
      HOME: ${{ github.workspace }}/..
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v2
        with:
          go-version: '1.17'

      - name: Set up Helm
        uses: azure/setup-helm@v1

      # prepare for build
      - run: sudo apt update && sudo apt install -y jq

      # Python is required because `ct lint` runs Yamale (https://github.com/23andMe/Yamale) and
      # yamllint (https://github.com/adrienverge/yamllint) which require Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.1.0

      - name: Run chart-testing (lint)
        run: ct lint --config ct.yaml

      - name: Create kind cluster
        uses: helm/kind-action@v1.2.0
        with:
          config: 'dev/cluster-config.yaml'

      - name: Create namespace
        run: | 
          kubectl create namespace tarian-system
          kubectl create namespace falco

      - name: Setup falco
        run: |
          helm repo add falcosecurity https://falcosecurity.github.io/charts
          helm repo update
          helm upgrade -i falco falcosecurity/falco -n falco -f "./dev/falco/falco-values.yaml" --set-file customRules."tarian_rules\.yaml"="./dev/falco/tarian_rules.yaml"

      - name: Install postgresql
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm install tarian-postgresql bitnami/postgresql -n tarian-system --set postgresqlUsername=postgres --set postgresqlPassword=tarian --set postgresqlDatabase=tarian

      - name: Install charts
        run: |
          APP_VERSION_TAG=$(helm show chart ./charts/tarian-server | grep appVersion | cut -d':' -f2 | tr -d ' "')
          echo $APP_VERSION_TAG

          set +e

          IMAGE_EXIST=$(sudo docker manifest inspect ghcr.io/kube-tarian/tarian-server:$APP_VERSION_TAG > /dev/null 2>&1)$?
          if [ $IMAGE_EXIST -gt 0 ]; then
            CONDITIONAL_SERVER_IMAGE_TAG="--set server.image.tag=latest"
            CONDITIONAL_CLUSTER_AGENT_IMAGE_TAG="--set clusterAgent.image.tag=latest --set webhook.podAgentContainerImage.tag=latest"
          fi

          set -e

          helm install tarian-server ./charts/tarian-server -n tarian-system --set server.service.type=NodePort --set server.service.nodePort=31051 $CONDITIONAL_SERVER_IMAGE_TAG
          helm install tarian-cluster-agent ./charts/tarian-cluster-agent/ -n tarian-system --set clusterAgent.service.type=NodePort --set clusterAgent.service.nodePort=31052 $CONDITIONAL_CLUSTER_AGENT_IMAGE_TAG --set clusterAgent.enableAddConstraint=true

      - name: Wait for pods ready
        run: |
          kubectl wait --for=condition=ready pod --all --all-namespaces --timeout=5m || true
          kubectl get pods --all-namespaces
          kubectl get deployment --all-namespaces
          sleep 5s

      # build tarianctl for k8s-test
      - run: go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
      - run: go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1
      - run: make protoc
      - run: make build

      - name: Run k8s test
        run: make k8s-test

  release:
    if: startsWith(github.ref, 'refs/heads/main')
    needs: lint-test
    runs-on: self-hosted
    env:
      GOPATH: ${{ github.workspace }}/../go
      HOME: ${{ github.workspace }}/..
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v1

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.2.1
        with:
          config: .cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
